Bash Scripting Solutions

    Bush tutorial course from Packt

    Author Ron Brash, Ganesh Naik.

01.Crash Course in Bash

    0101.The Course Overview
#################################################################################
    The Course Overview

    Section 1
        Crash Coyurse in Bash

    Section 2
        Acting Like a Typewriter and Explorer

    Section 3
        Understanding and Gaining File Sysytem Mastery

    Section 4
        Makeing a Script Brehave Like a Daemon

    Section 5
        Scripts for Administaration Task

    Section 6
        Scripts for Power Users

    Section 7
        Writing Bash tp Win and Profit

    Section 8
        Advanced Scripting Techniques


Approach

    * Introduces several key conscepts of Bash scripting language
    * Starting with input/output and string manipukation
    * Loasds to creating several unique mini-projects
    * Examples with best practices and tricks


Let's Cet Started!
#################################################################################

    0102.Getting Started with Bash and CLI Fundamentals
#################################################################################
Crash Course in Bash

    Section 1

    Getting Started with Bash and CLI Fundamentals

    Run terminal Ctrl+Alt+T

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~$ sudo -i
    [sudo] пароль для admin1:
root@ubuntu18:~#
//////////////////////////////////////////////////////////////////////////////////

    Команда:
     sudo
            -i, --login         запустить оболочку входа
                                в систему от имени
                                указанного пользователя;

     Bash Profile

        * Mentioned as .bashrc
        * Used to contain:
            - Command aliases;
            - Shortcuts;
            - Environment variables;
            - Other user enhancements - prompt colors.
        * Located at ~/.bashrc or ~/.bash_profile

    Команда reset работает аналогично clear, только она полностью очишает терминал
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~$ reset
//////////////////////////////////////////////////////////////////////////////////

Команда history возвращает список всех успешных команд выполненных через терминал.
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~$ history
 1992  sudo -i
 1993  cd /home/admin1/work/Education/Admining/
 1994  git clone git@github.com:pandrey76/Bash-Scripting-Solutions.git
 1995  history
 1996  reset
 1997  history
admin1@ubuntu18:~$ ls
 amdz-ng-gui_2019-03-29.bcss         node_modules
 Android                             package-lock.json
 AndroidStudioProjects                PascalSample.pas
admin1@ubuntu18:~$ cd ../
//////////////////////////////////////////////////////////////////////////////////

Команда pwd возвращает текущую директорию.
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:/home$ pwd
/home
//////////////////////////////////////////////////////////////////////////////////

Команда whoami возвращает текущего пользователя
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:/home$ whoami
admin1
//////////////////////////////////////////////////////////////////////////////////

Создаём новый shell скрипт и запускаем его в редакторе atom
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~$ cd "/home/admin1/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts/"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ atom script.sh
//////////////////////////////////////////////////////////////////////////////////

Делаем скрипт исполняемым
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ chmod a+x script.sh
//////////////////////////////////////////////////////////////////////////////////

Запускаем скрипт
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ bash script.sh
admin1
/home/admin1/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts
script.sh
Echo one 1
Echo two 2
//////////////////////////////////////////////////////////////////////////////////

Ещё один способ запуска скрипта
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ ./script.sh
admin1
/home/admin1/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts
script.sh
Echo one 1
Echo two 2
//////////////////////////////////////////////////////////////////////////////////

Relative Address and Full path
    * Relative addresses:
        - Interpreter to execute content exit in current directory:;
        - Example - /usr/bin, /bin/ and /sbin
    * Full pathL:
        - More concrete and hardcoded;
        - Interpreter try to use complete path;
        - Example - /bin/ls or /usr/local/bin/myBinary/.

Integrated Developmrnt Editors (IDEs)
    * List of editors:
        - vi/vim;
        - nano;
        - gedit.

Устанавливаем vim
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ sudo apt-get -y install vim
[sudo] пароль для admin1:
Чтение списков пакетов… Готово
Построение дерева зависимостей
Чтение информации о состоянии… Готово
Уже установлен пакет vim самой новой версии (2:8.0.1453-1ubuntu1.3).
Следующие пакеты устанавливались автоматически и больше не требуются:
  fonts-font-awesome libgeos-3.6.2 libllvm8 libllvm8:i386 libllvm9
  libllvm9:i386 python3-flask-htmlmin python3-htmlmin
Для их удаления используйте «sudo apt autoremove».
Обновлено 0 пакетов, установлено 0 новых пакетов, для удаления отмечено 0 пакетов, и 0 пакетов не обновлено.
//////////////////////////////////////////////////////////////////////////////////
For CentOs or RHEL
    * $ sudo yum install -y vim
For Fedora
    * $ sudo dnf install -y vim

Создаём скрипт в vim
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ vim my_first_script.sh
//////////////////////////////////////////////////////////////////////////////////

Работаем в vim:
    Включение режима вставки:
        Нажимаем 'i'
    Навигация:
        Стрелки: "Вперёд", "Назад", "Влево", "Вправо".
    Выход из режима вставки:
        Нажимаем "Esc" и переходим обратно в командный режим vim
    Выходим из vim:
        Вводим последовательность символов ':', 'w', и 'q' (:wq) и жмём 'Enter'.
        w - Запись файла на диск;
        q - Выход из vim.

    File "my_first_script.sh"$:
**********************************************************************************
#!/bin/bash

echo "Hello world! This is my first Bash script!"
# Опция "-n" - не выводить перевод строки;
echo -n "I am executing the script with user: "
whoami
echo -n "I am currently running in the directory: "
pwd
# "0" - означает нормальное окончание работы скрипта
exit 0
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ bash my_first_script.sh
Hello world! This is my first Bash script!
I am executing the script with user: admin1
I am currently running in the directory: /home/admin1/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts
//////////////////////////////////////////////////////////////////////////////////
#################################################################################


    0103.Creating and Using Basic Variables
#################################################################################
    Getting Ready

        Script-my_first_script.sh
     Could use variables to contain static or dynamic values/
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals/Scripts$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0102.Getting Started with Bash and CLI Fundamentals$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ cd "0103.Creating and Using Basic Variables"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0103.Creating and Using Basic Variables$ cd Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0103.Creating and Using Basic Variables/Scripts$ atom example.sh
//////////////////////////////////////////////////////////////////////////////////

    File "example.sh":
**********************************************************************************
#!/bin/bash

PI=3.14
VAR_A=10
VAR_B=$VAR_A
VAR_C=${VAR_B}

echo "Lets print 3 variables:"
echo $VAR_A
echo $VAR_B
echo $VAR_C

echo "We know this will break:"
echo "0. The value of PI is $PIabc"

echo "And these will work:"
echo "1. The value of PI is $PI"
echo "2. The value of PI is ${PI}"
echo "3. The value of PI is" $PI

echo "And we can make a new string"
STR_A="Bob"
STR_B="Jane"
echo "${STR_A} + ${STR_B} equals Bob + Jane"
STR_C=${STR_A}" + "${STR_B}
echo "$STR_C is the same as Bob + Jane too!"
echo "${STR_C} + ${PI}"

exit 0

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0103.Creating and Using Basic Variables/Scripts$ chmod a+x example.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0103.Creating and Using Basic Variables/Scripts$ bash example.sh
Lets print 3 variables:
10
10
10
We know this will break:
0. The value of PI is
And these will work:
1. The value of PI is 3.14
2. The value of PI is 3.14
3. The value of PI is 3.14
And we can make a new string
Bob + Jane equals Bob + Jane
Bob + Jane is the same as Bob + Jane too!
Bob + Jane + 3.14
//////////////////////////////////////////////////////////////////////////////////

#################################################################################


    0104.Hidden Bash Variables and Reserved Words
#################################################################################
    Global Shell Variable
        Available in global context
    Visible to all scripts in current shell or open shell consoles
    Useful variables available - $USER, $PWD, $OLDPWD, and $PATH

    Reserved Words
        * Used within a script or shell
        * Example:
            - if and else - provide conditional logic
        * Reserved:
            - if, elif, else, fi;
            - while, do, for, done, continue, break;
            - case, select, time;
            - function;
            - &, |, >, <, !, =;
            - #, $, (, ), ;, {, }, [, ], \.

    Full reference:
        * https://www.gnu.org/software/bash/manual/html_node/Reserved-Word-Index.html

    Escape Character
        * Array of specific characters tell Bash to perform specific functionalities
        * Example:
             - Pound (#)signifies a comment
             - Backslash (\) is a escape character.
        * Used to escape or stop the interpreter from executing specific functionality;
        * For example:
            - $ echo # Comment;
            - $ echo \# Comment;
            - # Comment.
#################################################################################

    0105.Conditional Logic Using if, else, and elseif
#################################################################################
   Conditional Logic Using if, else, and elseif

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0104.Hidden Bash Variables and Reserved Words$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ cd "0105.Conditional Logic Using if, else, and elseif"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif$ mkdir Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif$ cd Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ atom if.sh
//////////////////////////////////////////////////////////////////////////////////

    File "if.sh":
**********************************************************************************
#!/bin/bash

AGE=17
if [ ${AGE} -lt 18 ]; then
  echo "You must be 18 or older to see this movie"
fi
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ chmod a+x if.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ bash if.sh
You must be 18 or older to see this movie
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ atom if_else.sh
//////////////////////////////////////////////////////////////////////////////////

    File "if_else.sh":
**********************************************************************************
#!/bin/bash

AGE=40
if [ ${AGE} -lt 18 ]; then
  echo "You must be 18 or older to see this movie"
else
  echo "You may see the movie!"
  exit 1
fi

echo "This line will never get executed"
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ chmod a+x if_else.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ bash if_else.sh
You may see the movie!
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ atom if_elif.sh
//////////////////////////////////////////////////////////////////////////////////

    File "if_elif.sh":
**********************************************************************************
#!/bin/bash

AGE=21
if [ ${AGE} -lt 18 ]; then
  echo "You must be 18 or older to see this movie"
elif [ ${AGE} -eq 21 ]; then
  echo "You may see the movie and get popcorn"
else
  echo "You may see the movie!"
  exit 1
fi

echo "This line might not get executed"
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ chmod a+x if_elif.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ bash if_elif.sh
You may see the movie and get popcorn
This line might not get executed
//////////////////////////////////////////////////////////////////////////////////

    Oprerators
        * -gt (greater than >);
        * -ge (greater or equal to >=);
        * -lt (less than <);
        * -le (jess than or equal to <=);
        * -eq (equal to ==);
        * -nq (not equal to !=).

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ atom strings_evaluation.sh
//////////////////////////////////////////////////////////////////////////////////

    File "strings_evaluation.sh":
**********************************************************************************
#!/bin/bash

MY_NAME="John"
NAME_1="Bob"
NAME_2="Jane"
NAME_3="Sue"
NAME_4="Kate"

if [ "${MY_MAME}" == "Ron" ]; then
  echo "Ron is home from vacation"
elif [[ "${MY_MAME}" != ${NAME_1}" && "${MY_MAME}" != ${NAME_2}" && "${MY_NAME}" == "John" ]]; then
  echo "John is home after some unnecessary AND logic"
elif [ "${MY_MAME}" == ${NAME_3}" || "${MY_MAME}" == ${NAME_4}" ]; then
  echo "Look like one of the ladies are home"
else
  echo "Who is stranger?"
fi
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ chmod a+x strings_evaluation.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ bash strings_evaluation.sh
John is home after some unnecessary AND logic
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ atom nested_if.sh
//////////////////////////////////////////////////////////////////////////////////

    File "nested_if.sh":
**********************************************************************************
#!/bin/bash

USER_AGE=18
AGE_LIMIT=18
NAME="Bob"
HAS_NIGHTMARES="true"

if [ "${USER}" == "${NAME}" ]; then
  if [ ${USER_AGE} -ge ${AGE_LIMIT} ]; then
    if [ "${HAS_NIGHTMARES}" == "true" ]; then
      echo "${USER} get nightmares, and should not see the movie"
    fi
  fi
else
  echo "Who is this?"
fi
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ chmod a+x nested_if.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0105.Conditional Logic Using if, else, and elseif/Scripts$ bash nested_if.sh
Who is this?
//////////////////////////////////////////////////////////////////////////////////
#################################################################################


    0106.CaseSwitch Statements and Loop Constructs

#################################################################################

    CaseSwitch Statements and Loop Constructs

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ atom if_elif_else.sh
//////////////////////////////////////////////////////////////////////////////////

    File "if_elif_else.sh":
**********************************************************************************

#!/bin/bash

VAR=10

if [ $VAR -eq 1 ]; then
  echo "$VAR"
elif [ $VAR -eq 2 ]; then
  echo "$VAR"
elif [ $VAR -eq 3 ]; then
  echo "$VAR"
elif [ $VAR -eq 4 ]; then
  echo "$VAR"
elif [ $VAR -eq 5 ]; then
  echo "$VAR"
elif [ $VAR -eq 6 ]; then
  echo "$VAR"
elif [ $VAR -eq 7 ]; then
  echo "$VAR"
elif [ $VAR -eq 8 ]; then
  echo "$VAR"
elif [ $VAR -eq 9 ]; then
  echo "$VAR"
elif [ $VAR -eq 10 ]; then
  echo "$VAR"
else
  echo "I am not looking to match this value"
fi

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ chmod a+x if_elif_else.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ bash if_elif_else.sh
10
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ atom case.sh
//////////////////////////////////////////////////////////////////////////////////

    File "case.sh":
**********************************************************************************

#!/bin/bash

VAR=10

case $VAR in
  1)
    echo "1"
    ;;
  2)
    echo "2"
    ;;
  *)
    echo "What is this var?"
    exit 1
esac

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ chmod a+x case.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ bash case.sh
What is this var?
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ atom case1.sh
//////////////////////////////////////////////////////////////////////////////////

    File "case1.sh":
**********************************************************************************

#!/bin/bash

VAR=10

case $VAR in
  1)
    echo "1"
    ;;
  2)
    echo "2"
    ;;
  *)
    echo "What is this var?"
    exit 1
esac

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ chmod a+x case1.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ bash case1.sh
10
//////////////////////////////////////////////////////////////////////////////////

    Basic Loops

   Scenario: Imagine iterating through a list of files or a dynamic array and monotonously evaluating each and every one?
   Or waiting until a condition was true?

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ atom for.sh
//////////////////////////////////////////////////////////////////////////////////

    File "for.sh":
**********************************************************************************

#!/bin/bash

FILES=( "file1" "file2" "file3" )
for ELEMENT in ${FILES[@]}
do
  echo "${ELEMENT}"
done

echo "Echo\'d all the files"

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ chmod a+x for.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ bash for.sh
file1
file2
file3
Echo\'d all the files
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ atom do_while.sh
//////////////////////////////////////////////////////////////////////////////////

    File "do_while.sh":
**********************************************************************************

#!/bin/bash

CTR=1
while [ ${CTR} -lt 9 ]
do
  echo "CTR var: ${CTR}"
  ((CTR++))
done
echo "Finished"

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ chmod a+x do_while.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ bash do_while.sh
CTR var: 1
CTR var: 2
CTR var: 3
CTR var: 4
CTR var: 5
CTR var: 6
CTR var: 7
CTR var: 8
Finished
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ atom until.s
/////////////////////////////////////////////////////////////////////////////////

    File "until.sh":
**********************************************************************************

#!/bin/bash

CTR=1
until [ ${CTR} -gt 9 ]
do
  echo "CTR var: ${CTR}"
  ((CTR++))
done
echo "Finished"

**********************************************************************************

/////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ chmod a+x until.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ bash until.sh
CTR var: 1
CTR var: 2
CTR var: 3
CTR var: 4
CTR var: 5
CTR var: 6
CTR var: 7
CTR var: 8
CTR var: 9
Finished
/////////////////////////////////////////////////////////////////////////////////

#################################################################################

    0107.Using Functions and Parameters

#################################################################################


    Using Functions and Parameters

    Function - Definition

    A function is a self-contained section of code that performs a single task. However, a function performing
a task may also execute many subtasks in order to complete its main task.

    Function
        * Example - file_creator;
        * Task:
            - Check to see whether a file exits;
            - If the file exits, truncate it; otherwise, create a new one;
            - Apply correct permissions.

    Parameter
        * Variables that is set outside a function, used within the function;
        * Useful:
            - Create segments of code; perform generic task;
            - Reusable by other scripts or within loops;
            - Local variables accessible within the function itself.
//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs/Scripts$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0106.CaseSwitch Statements and Loop Constructs$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ atom my_function.sh//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

    File "my_function.sh":
**********************************************************************************

#!/bin/bash

function my_function() {
  local PARAM_1="$1"
  local PARAM_2="$2"
  local PARAM_3="$3"
  echo "${PARAM_1} ${PARAM_2} ${PARAM_3}"
}

my_function "a" "b" "c"

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ chmod a+x my_function.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ bash my_function.sh
a b c
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ atom function.sh
//////////////////////////////////////////////////////////////////////////////////


    File "function.sh":
**********************************************************************************

#!/bin/bash

FILES=( "file1" "file2" "file3" )

function  create_file() {
    local FNAME="${1}"
    local PERMISSIONS="${2}"
    touch "${FNAME}"
    chmod "${PERMISSIONS}" "${FNAME}"
    ls -l "${FNAME}"
}

for ELEMENT in ${FILES[@]}
do
  create_file "${ELEMENT}" "a+x"
done

echo "Created all the files with a function!"
exit 0

**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ chmod a+x function.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ bash function.sh
-rwxr-xr-x 1 admin1 admin1 0 окт  6 19:04 file1
-rwxr-xr-x 1 admin1 admin1 0 окт  6 19:04 file2
-rwxr-xr-x 1 admin1 admin1 0 окт  6 19:04 file3
Created all the files with a function!
//////////////////////////////////////////////////////////////////////////////////


#################################################################################

   0108.Including Source Files

#################################################################################


    Including Source Files


//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters/Scripts$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0107.Using Functions and Parameters$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ mkdir '0108.Including Source Files'
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ cd '0108.Including Source Files'
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files$ mkdir Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files$ cd Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files/Scripts$ atom library.sh
//////////////////////////////////////////////////////////////////////////////////

    File "library.sh":
**********************************************************************************

#!/bin/bash

function create_file() {
  local FNAME=$1
  touch "${FNAME}"
  ls "${FNAME}"
}

function delete_file() {
  local FNAME=$1
  rm "${FNAME}"
  ls "${FNAME}"
}


**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files/Scripts$ atom io_maker.sh
//////////////////////////////////////////////////////////////////////////////////


    File "function.sh":
**********************************************************************************

#!/bin/bash

source library.sh
FNAME="my_test_file.txt"
create_file "${FNAME}"
delete_file "${FNAME}"

exit 0
**********************************************************************************

//////////////////////////////////////////////////////////////////////////////////
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files/Scripts$ chmod a+x io_maker.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files/Scripts$ bash io_maker.sh
my_test_file.txt
ls: невозможно получить доступ к 'my_test_file.txt': Нет такого файла или каталога//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

#################################################################################


   0109.Retrieving Return codes and Output

#################################################################################


    Retrieving Return Codes and Output


//////////////////////////////////////////////////////////////////////////////////

admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files/Scripts$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0108.Including Source Files$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ mkdir "0109.Retrieving Return codes and Output"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ cd "0109.Retrieving Return codes and Output"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output$ atom Doc.txt Terminal.html

//////////////////////////////////////////////////////////////////////////////////


    Return Codes
        * Limited to between 0-255;
        * Use unsigned 8-bit integer;
        * Value of -1, it will return 255;
        * Useful when you want to know whether:
            - Found a match when performing a match;
            - Command executed successfully or encountered an error.


//////////////////////////////////////////////////////////////////////////////////

admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output$ mkdir Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output$ cd Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output/Scripts$ atom return_codes_101.sh

//////////////////////////////////////////////////////////////////////////////////


    File "return_codes_101.sh":
**********************************************************************************

#!/bin/bash

GLOBAL_RET=255

function my_function_global() {
  ls /home/${USER}/.bashrc
  GLOBAL_RET=$?
}

function my_function_return() {
  ls /home/${USER}/.bashrc
  return $?
}

function my_function_str() {
  local UNAME=$1
  local OUTPUT=""
  if [ -e /home/${UNAME}/.bashrc ];
  then
    OUTPUT='FOUND IT'
  else
    OUTPUT='NOT FOUND'
  fi
  echo ${OUTPUT}
}

echo "Current ret: ${GLOBAL_RET}"
my_function_global "${USER}"
echo "Current ret after: ${GLOBAL_RET}"
GLOBAL_RET=255
echo "Current ret: ${GLOBAL_RET}"
my_function_return "${USER}"
GLOBAL_RET=$?
echo "Current ret after: ${GLOBAL_RET}"

GLOBAL_RET=""
echo "Current ret: ${GLOBAL_RET}"
GLOBAL_RET=$(my_function_str ${USER})

echo "Current ret afetr: $GLOBAL_RET"
exit 0

**********************************************************************************


//////////////////////////////////////////////////////////////////////////////////

admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output/Scripts$ chmod a+x return_codes_101.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output/Scripts$ bash return_codes_101.sh
Current ret: 255
/home/admin1/.bashrc
Current ret after: 0
Current ret: 255
/home/admin1/.bashrc
Current ret after: 0
Current ret:
Current ret after: FOUND IT

//////////////////////////////////////////////////////////////////////////////////


#################################################################################

   0110.Getting Program Input Parameters

#################################################################################


    Getting Program Input Parameters


//////////////////////////////////////////////////////////////////////////////////

admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output/Scripts$ cd ../
admin1 @ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0109.Retrieving Return codes and Output$ cd ../
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ mkdir "0110.Getting Program Input Parameters"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash$ cd "0110.Getting Program Input Parameters"
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters$ atom Doc.txt Terminal.html

//////////////////////////////////////////////////////////////////////////////////

    Flags
        * Allows to perform things such as:
            + -l, --long-version, -v 10, --verbosity=10;
        * Used to pass parameters or arguments to a program at runtime;
        * Example - bash myProgram.sh -v 99 --name=Ron -l Bash

//////////////////////////////////////////////////////////////////////////////////

dmin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters$ mkdir Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters$ cd Scripts
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters/Scripts$ atom flags.sh

//////////////////////////////////////////////////////////////////////////////////


    File "flags.sh":
**********************************************************************************


#!/bin/bash

HELP_STR="usage: $0 [-h] [-f] [-l] [--firstname[=]<value>] [--lastname[=]<value>] [--help]"

optspec=":flh-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
        case "${OPTARG}" in
            firstname)
                val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                FIRSTNAME="${val}"
                ;;
            lastname)
                val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                LASTNAME="$val"
                ;;
            help)
                val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                ;;
            *)
                if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                    echo "Found an unknow option --${OPTARG}" >&2
                fi
                ;;
        esac;;
    f)
        val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
        FIRSTNAME="${val}"
        ;;
    l)
        val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
        LASTNAME="$val"
        ;;
    h)
        echo "${HELP_STR}" >&2
        exit 2
        ;;
    *)
        if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" != ":" ]; then
            echo "Error parsing short flag: '-${OPTARG}'" >&2
        fi
        ;;
    esac
done

if [ -z "$1" ]; then
    echo "${HELP_STR}" >&2
    exit 2
fi

if [ -z "${FIRSTNAME}" ] || [ -z "${LASTNAME}" ]; then
    echo "Both firstname and lastname are required!"
    exit 3
fi

echo "Welcome ${FIRSTNAME} ${LASTNAME}"

exit 0


**********************************************************************************


//////////////////////////////////////////////////////////////////////////////////

admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters/Scripts$ chmod a+x flags.sh
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters/Scripts$ bash flags.sh
usage: flags.sh [-h] [-f] [-l] [--firstname[=]<value>] [--lastname[=]<value>] [--help]
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters/Scripts$ bash flags.sh -h
usage: flags.sh [-h] [-f] [-l] [--firstname[=]<value>] [--lastname[=]<value>] [--help]
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters/Scripts$ bash flags.sh --fname Bob
Both firstname and lastname are required!
admin1@ubuntu18:~/work/Education/Admining/Bash-Scripting-Solutions/01.Crash Course in Bash/0110.Getting Program Input Parameters/Scripts$ bash flags.sh --firstname To -l Mater
Welcome To Mater

//////////////////////////////////////////////////////////////////////////////////

#################################################################################

